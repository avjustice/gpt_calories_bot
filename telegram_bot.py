from config import TG_TOKEN
import logging
from datetime import date
from gpt_calories import meal_calories
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters, \
    PicklePersistence

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

START, SEX, WEIGHT, HEIGHT, AGE, LIFESTYLE, BASIC_METABOLISM, AIM, MEAL, CHANGE_WEIGHT, WEIGHT_HANDLER = range(11)
BMR_AMR = {
    '–ù–∏–∑–∫–∞—è': 1.2,
    '–°—Ä–µ–¥–Ω—è—è': 1.375,
    '–í—ã—Å–æ–∫–∞—è': 1.55,
    '–°–ø–æ—Ä—Ç—Å–º–µ–Ω': 1.725
}
AIMS = {
    '–ü–æ—Ö—É–¥–µ—Ç—å': 0.9,
    '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å': 1,
    '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É': 1.1
}


async def start(update, context):
    user = update.effective_user
    logger.info('%s —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª –±–æ—Ç–∞', user.first_name)
    await update.message.reply_text(
        f"–ó–¥–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π!\n"
        f"–° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å.\n"
        f"–ü–∏—à–∏—Ç–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞–Ω–µ—Ä–µ –∏ –Ω–µ –º—É—á–∞–π—Ç–µ—Å—å —Å —Å–ª–æ–∂–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏!"
        , reply_markup=ReplyKeyboardMarkup([['–ü–æ–Ω—è—Ç–Ω–æ!']], resize_keyboard=True))
    return SEX


async def sex(update, context):
    reply_keyboard = [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']]
    await update.message.reply_text(
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏–º –≤–∞—à –±–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω"
    )
    await update.message.reply_text(
        f"–í–∞—à –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return WEIGHT


async def weight(update, context):
    user_sex = update.message.text
    context.user_data['sex'] = user_sex
    logger.info('%s –≤—ã–±—Ä–∞–ª –ø–æ–ª %s', update.message.from_user.first_name, user_sex)
    await update.message.reply_text(
        f"–í–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:",
        reply_markup=ReplyKeyboardRemove()
    )
    return HEIGHT


async def height(update, context):
    user_weight = update.message.text
    user_weight = user_weight.replace(',', '.')
    context.user_data['weight'] = round(float(user_weight), 1)
    logger.info('%s —É–∫–∞–∑–∞–ª –≤–µ—Å %s', update.message.from_user.first_name, user_weight)
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:"
    )
    return AGE


async def height_wrong_weight(update, context):
    logger.info('%s —É–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–µ—Å %s', update.message.from_user.first_name, update.message.text)
    await _wrong_info_message(update)
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:",
    )
    return HEIGHT


async def age(update, context):
    user_height = update.message.text
    context.user_data['height'] = int(user_height)
    logger.info('%s —É–∫–∞–∑–∞–ª —Ä–æ—Å—Ç %s', update.message.from_user.first_name, user_height)
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
    )
    return LIFESTYLE


async def age_wrong_height(update, context):
    logger.info('%s —É–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π —Ä–æ—Å—Ç %s', update.message.from_user.first_name, update.message.text)
    await _wrong_info_message(update)
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:",
    )
    return AGE


async def _wrong_info_message(update):
    await update.message.reply_text(
        f"–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ü§°ü§°ü§°"
    )


async def lifestyle(update, context):
    user_age = update.message.text
    context.user_data['age'] = int(user_age)
    logger.info('%s —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç %s', update.message.from_user.first_name, user_age)
    reply_keyboard = [['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–°–ø–æ—Ä—Ç—Å–º–µ–Ω']]
    await update.message.reply_text(
        f"–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return BASIC_METABOLISM


async def lifestyle_wrong_age(update, context):
    logger.info('%s —É–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç %s', update.message.from_user.first_name, update.message.text)
    await _wrong_info_message(update)
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
    )
    return LIFESTYLE


async def basic_metabolism(update, context):
    user_lifestyle = update.message.text
    context.user_data['lifestyle'] = user_lifestyle
    logger.info('%s —É–∫–∞–∑–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å %s', update.message.from_user.first_name, user_lifestyle)
    user = context.user_data
    bmr = await _bmr_calculator(user)
    amr = int(bmr * BMR_AMR[user['lifestyle']])
    user['amr'] = amr
    await update.message.reply_text(
        f"–í–∞—à –±–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω —Ä–∞–≤–µ–Ω {amr} –∫–∞–ª–æ—Ä–∏–π"
    )
    reply_keyboard = [['–ü–æ—Ö—É–¥–µ—Ç—å', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É']]
    await update.message.reply_text(
        f"–ö–∞–∫—É—é —Ü–µ–ª—å –≤—ã –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç–µ?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return AIM


async def _bmr_calculator(user):
    if user['sex'] == '–ú—É–∂—á–∏–Ω–∞':
        bmr = 88.362 + (13.397 * user['weight']) + (4.799 * user['height']) - (5.677 * user['age'])
    else:
        bmr = 447.593 + (9.247 * user['weight']) + (3.098 * user['height']) - (3.098 * user['age'])
    return int(bmr)


async def aim(update, context):
    user_aim = update.message.text
    context.user_data['aim'] = user_aim
    user = context.user_data
    user['calories_goal'] = int(AIMS[user_aim] * user['amr'])
    user['days'] = {}
    user['days'][date.today()] = 0
    logger.info('%s —É–∫–∞–∑–∞–ª —Ü–µ–ª—å—é %s. –ò–º–µ–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω %s, –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å %s –≤ –¥–µ–Ω—å',
                update.message.from_user.first_name, user_aim, user['amr'], user['calories_goal'])
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ. –í–∞—à–∞ —Ü–µ–ª—å: {user_aim}.\n"
        f"–î–ª—è —ç—Ç–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω—É–∂–Ω–æ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å {user['calories_goal']} –∫–∞–ª–æ—Ä–∏–π",
        reply_markup=ReplyKeyboardRemove()
    )
    await _ask_for_request(update)
    return MEAL


async def meal(update, context):
    meal_info = update.message.text
    user = context.user_data
    resp_text, resp_number = meal_calories(meal_info)
    logger.info('%s —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å %s –∏ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç %s (%s)',
                update.message.from_user.first_name, meal_info, resp_number, resp_text)
    today = await _date_update(user)
    if resp_number:
        user['days'][today] += resp_number
        await update.message.reply_text(
            f"–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ –≤ –ø–∏—â—É {resp_number} –∫–∞–ª–æ—Ä–∏–π.\n"
            f"–°—É–º–º–∞—Ä–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è {user['days'][today]}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —É–ø–æ—Ç—Ä–µ–±–∏—Ç—å {max(user['calories_goal'] - user['days'][today], 0)}",
        )
        logger.info('–£–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å %s', user)
    else:
        await update.message.reply_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏",
        )
        logger.info('–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å %s', user)
    await _ask_for_request(update)
    return MEAL


async def _ask_for_request(update):
    await update.message.reply_text(
        f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –µ–ª–∏. –Ø –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –≤–∞—Å.",
    )


async def _date_update(user):
    today = date.today()
    if today not in user['days']:
        user['days'][today] = 0
    return today


async def report(update, context):
    report_message = []
    users_days = context.user_data['days']
    user = context.user_data
    report_message.append(f"–í–∞—à–∞ —Ü–µ–ª—å: {user['aim']}\n"
                          f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å {user['calories_goal']} –∫–∞–ª–æ—Ä–∏–π.")
    users_days_ordered = dict(reversed(list(users_days.items())))
    calories_goal = user['calories_goal']
    goal = user['aim']
    for day, calories in users_days_ordered.items():
        if goal == '–ü–æ—Ö—É–¥–µ—Ç—å' and calories <= user['calories_goal'] or \
                goal == '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É' and calories >= calories_goal or \
                goal == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å' and calories_goal * 0.9 < calories < calories_goal * 1.1:
            report_message.append(f'üëç {day} –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {calories}')
        else:
            report_message.append(f'üëé {day} –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {calories}.')
    await update.message.reply_text(
        '\n\n'.join(report_message)
    )
    await _ask_for_request(update)
    return MEAL


async def change_weight_command(update, context):
    user = update.effective_user
    logger.info('%s –º–µ–Ω—è–µ—Ç –≤–µ—Å', user.first_name)
    await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö')
    return CHANGE_WEIGHT


async def change_weight(update, context):
    user_weight = update.message.text
    user_weight = user_weight.replace(',', '.')
    user = context.user_data
    user['weight'] = round(float(user_weight), 1)
    user['bmr'] = await _bmr_calculator(user)
    user['amr'] = int(user['bmr'] * BMR_AMR[user['lifestyle']])
    user['calories_goal'] = int(AIMS[user['aim']] * user['amr'])
    logger.info('%s –∏–∑–º–µ–Ω–∏–ª –≤–µ—Å %s. –ù–æ–≤—ã–π –æ–±–º–µ–Ω %s, –Ω–æ–≤–∞—è —Ü–µ–ª—å %s',
                update.message.from_user.first_name, user_weight, user['amr'], user['calories_goal'])
    await update.message.reply_text(
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–µ—Å {user['weight']} –∫–≥. –í–∞—à –±–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω {user['amr']}. "
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å {user['calories_goal']} –∫–∞–ª–æ—Ä–∏–π"
    )
    await _ask_for_request(update)

    return MEAL


async def change_weight_wrong(update, context):
    await _wrong_info_message(update)
    await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å:')
    logger.info('%s —É–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–µ—Å', update.message.from_user.first_name)

    return CHANGE_WEIGHT


def main():
    persistence = PicklePersistence(filepath="conversationbot")
    application = Application.builder().token(TG_TOKEN).persistence(persistence).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT, start)
        ],
        states={
            SEX: [MessageHandler(filters.TEXT, sex)],
            WEIGHT: [MessageHandler(filters.Regex("^(–ú—É–∂—á–∏–Ω–∞|–ñ–µ–Ω—â–∏–Ω–∞)$"), weight)],
            HEIGHT: [MessageHandler(filters.Regex("^([3-9][0-9]|1[0-9][0-9])((\.|\,)[1-9])?$"), height),
                     MessageHandler(filters.TEXT & ~filters.COMMAND, height_wrong_weight)
                     ],
            AGE: [MessageHandler(filters.Regex("^(1[0-9][0-9]|2[0-4][0-9])$"), age),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, age_wrong_height)
                  ],
            LIFESTYLE: [MessageHandler(filters.Regex("^([0-9][0-9]|1[0-2][0-9])$"), lifestyle),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, lifestyle_wrong_age)
                        ],
            BASIC_METABOLISM: [MessageHandler(filters.Regex("^(–ù–∏–∑–∫–∞—è|–°—Ä–µ–¥–Ω—è—è|–í—ã—Å–æ–∫–∞—è|–°–ø–æ—Ä—Ç—Å–º–µ–Ω)$"), basic_metabolism)],
            AIM: [MessageHandler(filters.Regex("^(–ü–æ—Ö—É–¥–µ—Ç—å|–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å|–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É)$"), aim)],
            MEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, meal),
                   CommandHandler("report", report),
                   CommandHandler("change_weight", change_weight_command)],
            CHANGE_WEIGHT: [MessageHandler(filters.Regex("^([3-9][0-9]|1[0-9][0-9])((\.|\,)[1-9])?$"), change_weight),
                            MessageHandler(filters.TEXT & ~filters.COMMAND, change_weight_wrong)
                            ],
        },
        fallbacks=[CommandHandler("start", start),
                   CommandHandler("report", report),
                   CommandHandler("change_weight", change_weight_command)],
        name="my_conversation",
        persistent=True,
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()
